################################
####### GENERAL PARAMETERS ######
#################################
max_step = 4000

amr.n_cell = n_cellx n_celly n_cellz
amr.max_grid_size = max_grid_size
amr.blocking_factor = blocking_factor
amr.refine_grid_layout = 1  # if n_MPI > n_grids, the grids will be successively divided in half until n_MPI <= n_grids

# need this here for some reason with blocking_factor = 40
amr.check_input = 0

geometry.dims = 3
geometry.prob_lo = -Lx/2. 0. 0.
geometry.prob_hi =  Lx/2. Ly Lz

amr.max_level = 0

# use pec instead of pml overlaying current source so you don't get a reflection
boundary.field_lo = pml pml pec
boundary.field_hi = pml pml pml

#################################
############ NUMERICS ###########
#################################
warpx.verbose = 1

warpx.cfl = 0.9

# vacuum or macroscopic
algo.em_solver_medium = macroscopic

# laxwendroff or backwardeuler
algo.macroscopic_sigma_method = laxwendroff

###############
# geometry
# each row represents a different part of the circuit
# 1. air everywhere, then add in alumina
# 2. alumina at the bottom of the microstrip
###############

macroscopic.sigma_function(x,y,z) = "sigma_air
+ (sigma_alumina - sigma_air)   * (z >= 0) * (z < h_port)"

macroscopic.epsilon_function(x,y,z) = "eps_0 * eps_r_air
+ eps_0 * (eps_r_alumina - eps_r_air)  * (z >= 0) * (z < h_port)"

macroscopic.mu_function(x,y,z) = "mu_0 * mu_r_air
+ mu_0 * (mu_r_alumina - mu_r_air)  * (z >= 0) * (z < h_port)"

#################################
############ Microstrip (PEC) #############
#################################
warpx.E_excitation_on_grid_style = "parse_E_excitation_grid_function"

warpx.Ex_excitation_flag_function(x,y,z) = (z > h_port-tiny) * (z < h_port+tiny) * (x > -w_port/2.-tiny) * (x < w_port/2.+tiny)
warpx.Ex_excitation_grid_function(x,y,z,t) = "0."

warpx.Ey_excitation_flag_function(x,y,z) = (z > h_port-tiny) * (z < h_port+tiny) * (x > -w_port/2.-tiny) * (x < w_port/2.+tiny)
warpx.Ey_excitation_grid_function(x,y,z,t) = "0."
#################################
############ FIELDS #############
#################################

###############
# domain size
# n_cellx/y/z and Lx/y/z are needed to calculate dx/dy/dz
###############
my_constants.n_cellx = 120
my_constants.n_celly = 280
my_constants.n_cellz = 30
my_constants.max_grid_size = 280
my_constants.blocking_factor = 280

my_constants.Lx = 6.e-6
my_constants.Ly = 14.e-6
my_constants.Lz = 1.5e-6

###############
# material properties
###############
my_constants.sigma_0 = 0.0
#my_constants.sigma_SiO2 = 1.e-10
my_constants.sigma_alumina = 1.e-12
my_constants.sigma_air = 1.e-15

my_constants.eps_0 = 8.8541878128e-12
#my_constants.eps_r_SiO2 = 3.8
my_constants.eps_r_alumina = 9.8
my_constants.eps_r_air = 1.0006

my_constants.mu_0 = 1.25663706212e-06
#my_constants.mu_r_SiO2 = 1.0
my_constants.mu_r_alumina = 1.0
my_constants.mu_r_air = 1.00000037

###############
# waveguide port parameters
###############
my_constants.h_port = Lz/3.
my_constants.w_port = 2.13089*h_port

my_constants.freq = 50.e12

###############
# derived quantities and fundamental constants - don't touch these
###############

my_constants.pi = 3.14159265358979

# grid spacing
my_constants.dx = Lx / n_cellx
my_constants.dy = Ly / n_celly
my_constants.dz = Lz / n_cellz

my_constants.tiny = 1.e-12

###############
# excitation
###############

warpx.E_excitation_on_grid_style = parse_E_excitation_grid_function

warpx.Ex_excitation_flag_function(x,y,z) = "0."
warpx.Ey_excitation_flag_function(x,y,z) = "0."
warpx.Ez_excitation_flag_function(x,y,z) = "2* (x > -w_port/2.) * (x < w_port/2.) * (z > 0.) * (z < h_port) * (y >= -dy/2.) * (y <= dy/2.)"

warpx.Ex_excitation_grid_function(x,y,z,t) = "0."
warpx.Ey_excitation_grid_function(x,y,z,t) = "0."
#warpx.Ez_excitation_grid_function(x,y,z,t) = "sin(2*pi*freq*t) * (t < (1./freq))"
warpx.Ez_excitation_grid_function(x,y,z,t) = "sin(2*pi*freq*t)"

warpx.B_excitation_on_grid_style = parse_B_excitation_grid_function

warpx.Bx_excitation_flag_function(x,y,z) = "2* (x > -w_port/2.) * (x < w_port/2.) * (z > 0.) * (z < h_port) * (y >= 0.) * (y <= dy)"
warpx.By_excitation_flag_function(x,y,z) = "0."
warpx.Bz_excitation_flag_function(x,y,z) = "0."

#warpx.Bx_excitation_grid_function(x,y,z,t) = "(mu_0*mu_r_SiO2/50.)*(sin(2*pi*freq*t)) * (t < (1./freq))"
warpx.Bx_excitation_grid_function(x,y,z,t) = "(mu_0*mu_r_alumina/50.)*(sin(2*pi*freq*t))"
warpx.By_excitation_grid_function(x,y,z,t) = "0."
warpx.Bz_excitation_grid_function(x,y,z,t) = "0."

###############
# diagnostics
###############

diagnostics.diags_names = plt
#diagnostics.diags_names = plt input output

###############
# full plotfiles
plt.intervals = 10
# plt.fields_to_plot = Ez Bx
plt.fields_to_plot = Ex Ey Ez Bx By Bz epsilon sigma mu
#plt.fields_to_plot = Ez epsilon sigma mu
plt.diag_type = Full

########################## Surface Integral on the Y-Plane #############################
my_constants.eps=1.e-9

warpx.reduced_diags_names = Int_yInputPlane Int_yIntermPlane Int_yOutputPlane  Int_yInputPlane2 Int_yInputPlane3 Int_yOutputPlane2 Int_yOutputPlane3
Int_yInputPlane.type = RawEFieldReduction
Int_yInputPlane.reduction_type = integral
Int_yInputPlane.integration_type = surface
Int_yInputPlane.intervals = 1
Int_yInputPlane.surface_normal = Y
my_constants.YInputPlaneLoc=6*dy #Nodes aligned with Y

Int_yIntermPlane.type = RawEFieldReduction
Int_yIntermPlane.reduction_type = integral
Int_yIntermPlane.integration_type = surface
Int_yIntermPlane.intervals = 1
Int_yIntermPlane.surface_normal = Y
my_constants.YIntermPlaneLoc=Ly/2. #Nodes aligned with Y

Int_yOutputPlane.type = RawEFieldReduction
Int_yOutputPlane.reduction_type = integral
Int_yOutputPlane.integration_type = surface
Int_yOutputPlane.intervals = 1
Int_yOutputPlane.surface_normal = Y
my_constants.YOutputPlaneLoc=Ly-2*dy #Nodes aligned with Y

Int_yInputPlane2.type = RawEFieldReduction
Int_yInputPlane2.reduction_type = integral
Int_yInputPlane2.integration_type = surface
Int_yInputPlane2.intervals = 1
Int_yInputPlane2.surface_normal = Y

Int_yInputPlane3.type = RawEFieldReduction
Int_yInputPlane3.reduction_type = integral
Int_yInputPlane3.integration_type = surface
Int_yInputPlane3.intervals = 1
Int_yInputPlane3.surface_normal = Y

Int_yOutputPlane2.type = RawEFieldReduction
Int_yOutputPlane2.reduction_type = integral
Int_yOutputPlane2.integration_type = surface
Int_yOutputPlane2.intervals = 1
Int_yOutputPlane2.surface_normal = Y

Int_yOutputPlane3.type = RawEFieldReduction
Int_yOutputPlane3.reduction_type = integral
Int_yOutputPlane3.integration_type = surface
Int_yOutputPlane3.intervals = 1
Int_yOutputPlane3.surface_normal = Y

 Int_yInputPlane.reduced_function(x,y,z) = " (x >= -w_port/2.) * (x <= w_port/2.) * (y >= YInputPlaneLoc - dy/2.) * (y <= YInputPlaneLoc) * (z > 0.) * (z <= h_port) * 1"
Int_yIntermPlane.reduced_function(x,y,z) = " (x >= -w_port/2.) * (x <= w_port/2.) * (y >= YIntermPlaneLoc - dy/2.) * (y <= YIntermPlaneLoc) * (z > 0.) * (z <= h_port) * 1"
Int_yOutputPlane.reduced_function(x,y,z) = " (x >= -w_port/2.) * (x <= w_port/2.) * (y >= YOutputPlaneLoc - dy/2.) * (y <= YOutputPlaneLoc) * (z > 0.) * (z <= h_port) * 1"

 Int_yInputPlane2.reduced_function(x,y,z) = " (y >= YInputPlaneLoc - dy/2.) * (y <= YInputPlaneLoc) * (z > 0.) * (z <= h_port) * 1"
 Int_yInputPlane3.reduced_function(x,y,z) = " (y >= YInputPlaneLoc - dy/2.) * (y <= YInputPlaneLoc) * 1"

Int_yOutputPlane2.reduced_function(x,y,z) = " (y >= YOutputPlaneLoc - dy/2.) * (y <= YOutputPlaneLoc) * (z > 0.) * (z <= h_port) * 1"
Int_yOutputPlane3.reduced_function(x,y,z) = " (y >= YOutputPlaneLoc - dy/2.) * (y <= YOutputPlaneLoc) * 1"
###############

