warpx.reduced_diags_names = ESurf_L1S1 ESurf_L2S1 ESurf_L3S1 ESurf_L4S1 ESurf_L5S1 BSurf_L1S1 BSurf_L1S2 BSurf_L1S3 BSurf_L1S4 BSurf_L2S1 BSurf_L2S2 BSurf_L2S3 BSurf_L2S4 BSurf_L3S1 BSurf_L3S2 BSurf_L3S3 BSurf_L3S4 BSurf_L4S1 BSurf_L4S2 BSurf_L4S3 BSurf_L4S4 BSurf_L5S1 BSurf_L5S2 BSurf_L5S3 BSurf_L5S4 EVolume1 BVolume1 


### Defining surfaces for E-field surface integrals to obtain voltages ###


# E-Surface ESurf_L1S1


ESurf_L1S1.type = RawEFieldReduction
ESurf_L1S1.reduction_type = integral
ESurf_L1S1.integration_type = surface
ESurf_L1S1.intervals = 1
ESurf_L1S1.surface_normal = y
my_constants.ESurf_L1S1_Loc = dy
ESurf_L1S1.scaling_factor = 2050.903 2050.903 2050.903
ESurf_L1S1.reduced_function(x,y,z) = " (x > -strip_width/2. - tiny) * (x < strip_width/2. + tiny) * (y > ESurf_L1S1_Loc - dy/2. - tiny ) * (y < ESurf_L1S1_Loc + tiny) * (z > 0.) * ( z < sub_thick + tiny) *1"


# E-Surface ESurf_L2S1


ESurf_L2S1.type = RawEFieldReduction
ESurf_L2S1.reduction_type = integral
ESurf_L2S1.integration_type = surface
ESurf_L2S1.intervals = 1
ESurf_L2S1.surface_normal = y
my_constants.ESurf_L2S1_Loc = 0.25*Ly
ESurf_L2S1.scaling_factor = 2050.903 2050.903 2050.903
ESurf_L2S1.reduced_function(x,y,z) = " (x > -strip_width/2. - tiny) * (x < strip_width/2. + tiny) * (y > ESurf_L2S1_Loc - dy/2. - tiny ) * (y < ESurf_L2S1_Loc + tiny) * (z > 0.) * ( z < sub_thick + tiny) *1"


# E-Surface ESurf_L3S1


ESurf_L3S1.type = RawEFieldReduction
ESurf_L3S1.reduction_type = integral
ESurf_L3S1.integration_type = surface
ESurf_L3S1.intervals = 1
ESurf_L3S1.surface_normal = y
my_constants.ESurf_L3S1_Loc = 0.5*Ly
ESurf_L3S1.scaling_factor = 2050.903 2050.903 2050.903
ESurf_L3S1.reduced_function(x,y,z) = " (x > -strip_width/2. - tiny) * (x < strip_width/2. + tiny) * (y > ESurf_L3S1_Loc - dy/2. - tiny ) * (y < ESurf_L3S1_Loc + tiny) * (z > 0.) * ( z < sub_thick + tiny) *1"


# E-Surface ESurf_L4S1


ESurf_L4S1.type = RawEFieldReduction
ESurf_L4S1.reduction_type = integral
ESurf_L4S1.integration_type = surface
ESurf_L4S1.intervals = 1
ESurf_L4S1.surface_normal = y
my_constants.ESurf_L4S1_Loc = 0.75*Ly
ESurf_L4S1.scaling_factor = 2050.903 2050.903 2050.903
ESurf_L4S1.reduced_function(x,y,z) = " (x > -strip_width/2. - tiny) * (x < strip_width/2. + tiny) * (y > ESurf_L4S1_Loc - dy/2. - tiny ) * (y < ESurf_L4S1_Loc + tiny) * (z > 0.) * ( z < sub_thick + tiny) *1"


# E-Surface ESurf_L5S1


ESurf_L5S1.type = RawEFieldReduction
ESurf_L5S1.reduction_type = integral
ESurf_L5S1.integration_type = surface
ESurf_L5S1.intervals = 1
ESurf_L5S1.surface_normal = y
my_constants.ESurf_L5S1_Loc = Ly-2*dy
ESurf_L5S1.scaling_factor = 2050.903 2050.903 2050.903
ESurf_L5S1.reduced_function(x,y,z) = " (x > -strip_width/2. - tiny) * (x < strip_width/2. + tiny) * (y > ESurf_L5S1_Loc - dy/2. - tiny ) * (y < ESurf_L5S1_Loc + tiny) * (z > 0.) * ( z < sub_thick + tiny) *1"


### Defining surfaces for B-Field contour integrals to obtain current ###


# B-Surface BSurf_L1S1


BSurf_L1S1.type = RawBFieldReduction
BSurf_L1S1.reduction_type = integral
BSurf_L1S1.integration_type = surface
BSurf_L1S1.intervals = 1
BSurf_L1S1.surface_normal = y
my_constants.BSurf_L1S1_Loc = dy
BSurf_L1S1.scaling_factor = -795774.715 795774.715 795774.715
BSurf_L1S1.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L1S1_Loc - dy/2. - tiny ) * (y < BSurf_L1S1_Loc + tiny) * (z > sub_thick - dz - tiny) * ( z < sub_thick) *1"
# B-Surface BSurf_L1S2


BSurf_L1S2.type = RawBFieldReduction
BSurf_L1S2.reduction_type = integral
BSurf_L1S2.integration_type = surface
BSurf_L1S2.intervals = 1
BSurf_L1S2.surface_normal = y
my_constants.BSurf_L1S2_Loc = dy
BSurf_L1S2.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L1S2.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < -strip_width/2.-tiny) * (y > BSurf_L1S2_Loc - dy/2. - tiny ) * (y < BSurf_L1S2_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"
# B-Surface BSurf_L1S3


BSurf_L1S3.type = RawBFieldReduction
BSurf_L1S3.reduction_type = integral
BSurf_L1S3.integration_type = surface
BSurf_L1S3.intervals = 1
BSurf_L1S3.surface_normal = y
my_constants.BSurf_L1S3_Loc = dy
BSurf_L1S3.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L1S3.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L1S3_Loc - dy/2. - tiny ) * (y < BSurf_L1S3_Loc + tiny) * (z > sub_thick) * ( z < sub_thick + dz + tiny) *1"
# B-Surface BSurf_L1S4


BSurf_L1S4.type = RawBFieldReduction
BSurf_L1S4.reduction_type = integral
BSurf_L1S4.integration_type = surface
BSurf_L1S4.intervals = 1
BSurf_L1S4.surface_normal = y
my_constants.BSurf_L1S4_Loc = dy
BSurf_L1S4.scaling_factor =  795774.715 795774.715 -795774.715
BSurf_L1S4.reduced_function(x,y,z) = " (x > strip_width/2.+tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L1S4_Loc - dy/2. - tiny ) * (y < BSurf_L1S4_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"


# B-Surface BSurf_L2S1


BSurf_L2S1.type = RawBFieldReduction
BSurf_L2S1.reduction_type = integral
BSurf_L2S1.integration_type = surface
BSurf_L2S1.intervals = 1
BSurf_L2S1.surface_normal = y
my_constants.BSurf_L2S1_Loc = 0.25*Ly
BSurf_L2S1.scaling_factor = -795774.715 795774.715 795774.715
BSurf_L2S1.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L2S1_Loc - dy/2. - tiny ) * (y < BSurf_L2S1_Loc + tiny) * (z > sub_thick - dz - tiny) * ( z < sub_thick) *1"
# B-Surface BSurf_L2S2


BSurf_L2S2.type = RawBFieldReduction
BSurf_L2S2.reduction_type = integral
BSurf_L2S2.integration_type = surface
BSurf_L2S2.intervals = 1
BSurf_L2S2.surface_normal = y
my_constants.BSurf_L2S2_Loc = 0.25*Ly
BSurf_L2S2.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L2S2.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < -strip_width/2.-tiny) * (y > BSurf_L2S2_Loc - dy/2. - tiny ) * (y < BSurf_L2S2_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"
# B-Surface BSurf_L2S3


BSurf_L2S3.type = RawBFieldReduction
BSurf_L2S3.reduction_type = integral
BSurf_L2S3.integration_type = surface
BSurf_L2S3.intervals = 1
BSurf_L2S3.surface_normal = y
my_constants.BSurf_L2S3_Loc = 0.25*Ly
BSurf_L2S3.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L2S3.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L2S3_Loc - dy/2. - tiny ) * (y < BSurf_L2S3_Loc + tiny) * (z > sub_thick) * ( z < sub_thick + dz + tiny) *1"
# B-Surface BSurf_L2S4


BSurf_L2S4.type = RawBFieldReduction
BSurf_L2S4.reduction_type = integral
BSurf_L2S4.integration_type = surface
BSurf_L2S4.intervals = 1
BSurf_L2S4.surface_normal = y
my_constants.BSurf_L2S4_Loc = 0.25*Ly
BSurf_L2S4.scaling_factor =  795774.715 795774.715 -795774.715
BSurf_L2S4.reduced_function(x,y,z) = " (x > strip_width/2.+tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L2S4_Loc - dy/2. - tiny ) * (y < BSurf_L2S4_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"


# B-Surface BSurf_L3S1


BSurf_L3S1.type = RawBFieldReduction
BSurf_L3S1.reduction_type = integral
BSurf_L3S1.integration_type = surface
BSurf_L3S1.intervals = 1
BSurf_L3S1.surface_normal = y
my_constants.BSurf_L3S1_Loc = 0.5*Ly
BSurf_L3S1.scaling_factor = -795774.715 795774.715 795774.715
BSurf_L3S1.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L3S1_Loc - dy/2. - tiny ) * (y < BSurf_L3S1_Loc + tiny) * (z > sub_thick - dz - tiny) * ( z < sub_thick) *1"
# B-Surface BSurf_L3S2


BSurf_L3S2.type = RawBFieldReduction
BSurf_L3S2.reduction_type = integral
BSurf_L3S2.integration_type = surface
BSurf_L3S2.intervals = 1
BSurf_L3S2.surface_normal = y
my_constants.BSurf_L3S2_Loc = 0.5*Ly
BSurf_L3S2.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L3S2.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < -strip_width/2.-tiny) * (y > BSurf_L3S2_Loc - dy/2. - tiny ) * (y < BSurf_L3S2_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"
# B-Surface BSurf_L3S3


BSurf_L3S3.type = RawBFieldReduction
BSurf_L3S3.reduction_type = integral
BSurf_L3S3.integration_type = surface
BSurf_L3S3.intervals = 1
BSurf_L3S3.surface_normal = y
my_constants.BSurf_L3S3_Loc = 0.5*Ly
BSurf_L3S3.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L3S3.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L3S3_Loc - dy/2. - tiny ) * (y < BSurf_L3S3_Loc + tiny) * (z > sub_thick) * ( z < sub_thick + dz + tiny) *1"
# B-Surface BSurf_L3S4


BSurf_L3S4.type = RawBFieldReduction
BSurf_L3S4.reduction_type = integral
BSurf_L3S4.integration_type = surface
BSurf_L3S4.intervals = 1
BSurf_L3S4.surface_normal = y
my_constants.BSurf_L3S4_Loc = 0.5*Ly
BSurf_L3S4.scaling_factor =  795774.715 795774.715 -795774.715
BSurf_L3S4.reduced_function(x,y,z) = " (x > strip_width/2.+tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L3S4_Loc - dy/2. - tiny ) * (y < BSurf_L3S4_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"


# B-Surface BSurf_L4S1


BSurf_L4S1.type = RawBFieldReduction
BSurf_L4S1.reduction_type = integral
BSurf_L4S1.integration_type = surface
BSurf_L4S1.intervals = 1
BSurf_L4S1.surface_normal = y
my_constants.BSurf_L4S1_Loc = 0.75*Ly
BSurf_L4S1.scaling_factor = -795774.715 795774.715 795774.715
BSurf_L4S1.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L4S1_Loc - dy/2. - tiny ) * (y < BSurf_L4S1_Loc + tiny) * (z > sub_thick - dz - tiny) * ( z < sub_thick) *1"
# B-Surface BSurf_L4S2


BSurf_L4S2.type = RawBFieldReduction
BSurf_L4S2.reduction_type = integral
BSurf_L4S2.integration_type = surface
BSurf_L4S2.intervals = 1
BSurf_L4S2.surface_normal = y
my_constants.BSurf_L4S2_Loc = 0.75*Ly
BSurf_L4S2.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L4S2.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < -strip_width/2.-tiny) * (y > BSurf_L4S2_Loc - dy/2. - tiny ) * (y < BSurf_L4S2_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"
# B-Surface BSurf_L4S3


BSurf_L4S3.type = RawBFieldReduction
BSurf_L4S3.reduction_type = integral
BSurf_L4S3.integration_type = surface
BSurf_L4S3.intervals = 1
BSurf_L4S3.surface_normal = y
my_constants.BSurf_L4S3_Loc = 0.75*Ly
BSurf_L4S3.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L4S3.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L4S3_Loc - dy/2. - tiny ) * (y < BSurf_L4S3_Loc + tiny) * (z > sub_thick) * ( z < sub_thick + dz + tiny) *1"
# B-Surface BSurf_L4S4


BSurf_L4S4.type = RawBFieldReduction
BSurf_L4S4.reduction_type = integral
BSurf_L4S4.integration_type = surface
BSurf_L4S4.intervals = 1
BSurf_L4S4.surface_normal = y
my_constants.BSurf_L4S4_Loc = 0.75*Ly
BSurf_L4S4.scaling_factor =  795774.715 795774.715 -795774.715
BSurf_L4S4.reduced_function(x,y,z) = " (x > strip_width/2.+tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L4S4_Loc - dy/2. - tiny ) * (y < BSurf_L4S4_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"


# B-Surface BSurf_L5S1


BSurf_L5S1.type = RawBFieldReduction
BSurf_L5S1.reduction_type = integral
BSurf_L5S1.integration_type = surface
BSurf_L5S1.intervals = 1
BSurf_L5S1.surface_normal = y
my_constants.BSurf_L5S1_Loc = Ly-2*dy
BSurf_L5S1.scaling_factor = -795774.715 795774.715 795774.715
BSurf_L5S1.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L5S1_Loc - dy/2. - tiny ) * (y < BSurf_L5S1_Loc + tiny) * (z > sub_thick - dz - tiny) * ( z < sub_thick) *1"
# B-Surface BSurf_L5S2


BSurf_L5S2.type = RawBFieldReduction
BSurf_L5S2.reduction_type = integral
BSurf_L5S2.integration_type = surface
BSurf_L5S2.intervals = 1
BSurf_L5S2.surface_normal = y
my_constants.BSurf_L5S2_Loc = Ly-2*dy
BSurf_L5S2.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L5S2.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < -strip_width/2.-tiny) * (y > BSurf_L5S2_Loc - dy/2. - tiny ) * (y < BSurf_L5S2_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"
# B-Surface BSurf_L5S3


BSurf_L5S3.type = RawBFieldReduction
BSurf_L5S3.reduction_type = integral
BSurf_L5S3.integration_type = surface
BSurf_L5S3.intervals = 1
BSurf_L5S3.surface_normal = y
my_constants.BSurf_L5S3_Loc = Ly-2*dy
BSurf_L5S3.scaling_factor =  795774.715 795774.715 795774.715
BSurf_L5S3.reduced_function(x,y,z) = " (x > -strip_width/2. - dz - tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L5S3_Loc - dy/2. - tiny ) * (y < BSurf_L5S3_Loc + tiny) * (z > sub_thick) * ( z < sub_thick + dz + tiny) *1"
# B-Surface BSurf_L5S4


BSurf_L5S4.type = RawBFieldReduction
BSurf_L5S4.reduction_type = integral
BSurf_L5S4.integration_type = surface
BSurf_L5S4.intervals = 1
BSurf_L5S4.surface_normal = y
my_constants.BSurf_L5S4_Loc = Ly-2*dy
BSurf_L5S4.scaling_factor =  795774.715 795774.715 -795774.715
BSurf_L5S4.reduced_function(x,y,z) = " (x > strip_width/2.+tiny) * (x < strip_width/2. + dz + tiny) * (y > BSurf_L5S4_Loc - dy/2. - tiny ) * (y < BSurf_L5S4_Loc + tiny) * (z > sub_thick - dz/2.-tiny) * ( z < sub_thick + dz/2.+tiny) *1"


### Defining volumes for E-Field volume integrals to obtain stored magnetic energy ###


EVolume1.type = FieldReduction
EVolume1.intervals = 1
EVolume1.reduction_type = integral
EVolume1.reduced_function(x,y,z,Ex,Ey,Ez,Bx,By,Bz) = "if(z < sub_thick, 0.5*(Ex**2 + Ey**2 + Ez**2)*eps_0*eps_r_alumina, 0.5*(Ex**2 + Ey**2 + Ez**2)*eps_0*eps_r_air)"

EVolume2.type = FieldReduction
EVolume2.intervals = 1
EVolume2.reduction_type = integral
EVolume2.reduced_function(x,y,z,Ex,Ey,Ez,Bx,By,Bz) = "(z < sub_thick) * 0.5*(Ex**2 + Ey**2 + Ez**2)*eps_0*eps_r_alumina + (z > sub_thick) * 0.5*(Ex**2 + Ey**2 + Ez**2)*eps_0*eps_r_air"

EVolume3.type = FieldReduction
EVolume3.intervals = 1
EVolume3.reduction_type = integral
EVolume3.reduced_function(x,y,z,Ex,Ey,Ez,Bx,By,Bz) = "(x > 0.25*Ly) * (z < sub_thick) * 0.5*(Ex**2 + Ey**2 + Ez**2)*eps_0*eps_r_alumina + (x > 0.25*Ly) * (z > sub_thick) * 0.5*(Ex**2 + Ey**2 + Ez**2)*eps_0*eps_r_air"

### Defining volumes for B-Field volume integrals to obtain stored magnetic energy ###

BVolume1.type = FieldReduction
BVolume1.intervals = 1
BVolume1.reduction_type = integral
BVolume1.reduced_function(x,y,z,Ex,Ey,Ez,Bx,By,Bz) = "0.5*(Bx**2+By**2+Bz**2)/mu_0"
