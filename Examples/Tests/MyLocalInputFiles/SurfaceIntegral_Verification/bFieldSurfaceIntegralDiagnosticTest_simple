# This is test case for verifying reduced diagnostics to calculate surface/volume integrals of the B field for noncubic cells in a noncubic domain. (use USE_LLG=FALSE, ie., no M field)
# Bfield is simulated in a vacuum and initialized on each cells to be equal to 1.

################################
####### GENERAL PARAMETERS ######
#################################
max_step = 1
amr.n_cell = n_cellx n_celly n_cellz

amr.max_grid_size = 2
amr.blocking_factor = 2
geometry.dims = 3
geometry.prob_lo     =  -Lx/2. -Ly/2. -Lz/2.
geometry.prob_hi     =   Lx/2.  Ly/2.  Lz/2.
boundary.field_lo = periodic periodic periodic
boundary.field_hi = periodic periodic periodic
amr.max_level = 0

# domain size
 my_constants.n_cellx = 2
 my_constants.n_celly = 2
 my_constants.n_cellz = 2

# grid spacing
 my_constants.Lx = 8.e-6
 my_constants.Ly = 8.e-6
 my_constants.Lz = 8.e-6

my_constants.tiny = 1.e-12
my_constants.dx = Lx/n_cellx
my_constants.dy = Ly/n_celly
my_constants.dz = Lz/n_cellz
#################################
############ NUMERICS ###########
#################################
warpx.verbose = 1
warpx.use_filter = 0
warpx.cfl = 0.9
my_constants.sigma = 0.
my_constants.eps_r = 1.0
my_constants.mu_r = 1.0

algo.em_solver_medium = macroscopic # vacuum/macroscopic
algo.macroscopic_sigma_method = laxwendroff # laxwendroff or backwardeuler
macroscopic.sigma_function(x,y,z) = "sigma"
macroscopic.epsilon_function(x,y,z) = "8.8541878128e-12*eps_r"
macroscopic.mu_function(x,y,z) = "1.25663706212e-06*mu_r"

#################################
############ FIELDS #############
#################################

my_constants.pi = 3.14159265359
my_constants.c = 299792458.

warpx.E_ext_grid_init_style = parse_E_ext_grid_function
warpx.Ez_external_grid_function(x,y,z) = "0"
warpx.Ex_external_grid_function(x,y,z) = "0"
warpx.Ey_external_grid_function(x,y,z) = "0"

warpx.B_ext_grid_init_style = parse_B_ext_grid_function
warpx.Bx_external_grid_function(x,y,z)= "1."
warpx.By_external_grid_function(x,y,z)= "1."
warpx.Bz_external_grid_function(x,y,z) = "1."

# Diagnostics
diagnostics.diags_names = plt chk
plt.intervals = 5
plt.fields_to_plot = Bx By Bz
plt.diag_type = Full

chk.format = checkpoint
chk.intervals = 100
chk.diag_type = Full



######################### Surface Integral on the Y-Plane #############################
my_constants.eps=1.e-14

warpx.reduced_diags_names = Int_xPlane Int_yPlane Int_zPlane IntVolume
my_constants.eps=1.e-9
Int_xPlane.type = RawBFieldReduction
Int_xPlane.reduction_type = integral
Int_xPlane.integration_type = surface
Int_xPlane.intervals = 1
Int_xPlane.multiplier_vector = 1 1 0.25
Int_xPlane.surface_normal = X
my_constants.XPlaneLoc=dx/2.

Int_yPlane.type = RawBFieldReduction
Int_yPlane.reduction_type = integral
Int_yPlane.integration_type = surface
Int_yPlane.intervals = 1
Int_yPlane.multiplier_vector = 1 1 0.5
Int_yPlane.surface_normal = Y
my_constants.YPlaneLoc=dy/2.

Int_zPlane.type = RawBFieldReduction
Int_zPlane.reduction_type = integral
Int_zPlane.integration_type = surface
Int_zPlane.intervals = 1
Int_zPlane.multiplier_vector = -1 1 1
Int_zPlane.surface_normal = Z
my_constants.ZPlaneLoc=dz/2.

IntVolume.type = RawBFieldReduction
IntVolume.reduction_type = integral
IntVolume.integration_type = volume
IntVolume.intervals = 1

##Example 1: Full Surface
#Expected answer for each component for which the multiplier is 1 is: (n_cellx*dx)**2 = (2*4e-6)**2 =6.4e-11
#Int_xPlane.reduced_function(x,y,z) = " (x > XPlaneLoc - dx/2.-eps) * (x < XPlaneLoc + eps) * 1"
#Int_yPlane.reduced_function(x,y,z) = " (y > YPlaneLoc - dy/2.-eps) * (y < YPlaneLoc+eps) * 1"
#Int_zPlane.reduced_function(x,y,z) = " (z > ZPlaneLoc - dz/2.-eps) * (z < ZPlaneLoc+eps) * 1"

#Example 2: Half Surface
#Expected answer for each component for which the multiplier is 1 is: 0.5*(n_cellx*dx)**2 = 3.2e-11
Int_xPlane.reduced_function(x,y,z) = " (x > XPlaneLoc - dx/2.-eps) * (x < XPlaneLoc + eps) * (z > -Lz/2.) * (z < 0.+eps) * 1"
Int_yPlane.reduced_function(x,y,z) = " (y > YPlaneLoc - dy/2. - eps) * (y < YPlaneLoc+eps) * (z > -Lz/2.) * (z < 0.+eps) * 1"
Int_zPlane.reduced_function(x,y,z) = " (x > -Lx/2.) * (x < 0.+eps) * (z > ZPlaneLoc - dz/2. - eps) * (z < ZPlaneLoc+eps) * 1"

#Example 3: Quarter Surface
#Int_xPlane.reduced_function(x,y,z) = " (x > XPlaneLoc - dx/2. - eps) * (x < XPlaneLoc+eps) * (y > 0.-eps) * (y < Ly/2.) * (z > -Lz/2.) * (z < 0.+eps) * 1"
#Int_yPlane.reduced_function(x,y,z) = " (x > -Lx/2.) * (x < 0. + eps) * (y > YPlaneLoc - dy/2. -eps) * (y < YPlaneLoc+eps) * (z > -Lz/2.) * (z < 0.+eps) * 1"
#Int_zPlane.reduced_function(x,y,z) = " (x > -Lx/2.) * (x < 0.+eps) *(y > -Ly/2.) * (y<0.+eps) * (z > ZPlaneLoc - dz/2. - eps) * (z < ZPlaneLoc+eps) * 1"
IntVolume.reduced_function(x,y,z) = " (x > -Lx/2.-eps) * (x < Lx/2. + eps) *  (y > -Ly/2.-eps) * (y < Ly/2. + eps) *  (z > -Lz/2.-eps) * (z < Lz/2. + eps) * 1"
